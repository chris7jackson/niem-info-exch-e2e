name: PR Quality Checks

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'api/**'
      - 'ui/**'
      - '.github/workflows/**'
  workflow_dispatch:  # Manual trigger for testing

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # DETECT WHICH FILES CHANGED
  # =============================================================================

  changes:
    name: Detect Changed Files
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      ui: ${{ steps.filter.outputs.ui }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
              - '.github/workflows/pr-checks.yml'
              - '.github/workflows/api-tests.yml'
            ui:
              - 'ui/**'
              - '.github/workflows/pr-checks.yml'
              - '.github/workflows/ui-tests.yml'

  # =============================================================================
  # BACKEND QUALITY CHECKS
  # =============================================================================

  backend-quality:
    name: Backend Quality (Lint, Type, Unit Tests)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.api == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'api/requirements*.txt'

      - name: Install dependencies
        run: |
          cd api
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run Ruff linter
        run: |
          cd api
          ruff check src/ --output-format=github

      - name: Run Black formatter check
        run: |
          cd api
          black src/ --check --diff

      - name: Run MyPy type checking
        run: |
          cd api
          mypy src/

      - name: Run Bandit security check (high+ severity)
        run: |
          cd api
          bandit -r src/ -ll -f json -o bandit-report.json || true
          bandit -r src/ -ll

      - name: Run unit tests with coverage
        run: |
          cd api
          pytest tests/unit/ \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-fail-under=80 \
            --junit-xml=pytest-report.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: |
            api/coverage.xml
            api/htmlcov/

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-security
          path: api/bandit-report.json

  # =============================================================================
  # FRONTEND QUALITY CHECKS
  # =============================================================================

  frontend-quality:
    name: Frontend Quality (Lint, Type, Unit Tests)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.ui == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: |
          cd ui
          npm ci

      - name: Run ESLint
        run: |
          cd ui
          npm run lint

      - name: Run TypeScript type checking
        run: |
          cd ui
          npm run type-check

      - name: Run npm audit (critical vulnerabilities only)
        run: |
          cd ui
          npm audit --audit-level=critical --json > npm-audit.json || true
          npm audit --audit-level=critical

      - name: Run unit tests with coverage
        run: |
          cd ui
          npm run test:coverage

      - name: Check build
        run: |
          cd ui
          npm run build

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: ui/coverage/

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security
          path: ui/npm-audit.json

  # =============================================================================
  # OVERALL STATUS CHECK
  # =============================================================================

  pr-status:
    name: PR Quality Status
    runs-on: ubuntu-latest
    needs: [changes, backend-quality, frontend-quality]
    if: always()

    steps:
      - name: Check all quality gates passed
        run: |
          backend_result="${{ needs.backend-quality.result }}"
          frontend_result="${{ needs.frontend-quality.result }}"

          # Allow skipped jobs (when files didn't change)
          if [[ "$backend_result" == "success" || "$backend_result" == "skipped" ]] && \
             [[ "$frontend_result" == "success" || "$frontend_result" == "skipped" ]]; then
            echo "✅ All quality checks passed!"
            exit 0
          else
            echo "❌ Quality checks failed!"
            echo "Backend: $backend_result"
            echo "Frontend: $frontend_result"
            exit 1
          fi
