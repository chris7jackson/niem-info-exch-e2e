name: PR Quality Checks

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'api/**'
      - 'ui/**'
      - '.github/workflows/**'
  workflow_dispatch:  # Manual trigger for testing

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # BACKEND QUALITY CHECKS
  # =============================================================================

  backend-quality:
    name: Backend Quality (Lint, Type, Unit Tests)
    runs-on: ubuntu-latest

    # Only run if API files changed
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.pull_request.changed_files, 'api/') ||
      contains(github.event.pull_request.changed_files, '.github/workflows/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'api/requirements*.txt'

      - name: Install dependencies
        run: |
          cd api
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run Ruff linter
        run: |
          cd api
          ruff check src/ --output-format=github

      - name: Run Black formatter check
        run: |
          cd api
          black src/ --check --diff

      - name: Run MyPy type checking
        run: |
          cd api
          mypy src/

      - name: Run Bandit security check (high+ severity)
        run: |
          cd api
          bandit -r src/ -ll -f json -o bandit-report.json || true
          # Fail on high/critical security issues
          bandit -r src/ -ll

      - name: Run unit tests with coverage
        run: |
          cd api
          # Generate coverage report (without failing on overall coverage)
          pytest tests/unit/ \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --junit-xml=pytest-report.xml

      - name: Check coverage on changed code only
        if: github.event_name == 'pull_request'
        run: |
          cd api
          # Install diff-cover to check only new/changed lines
          pip install diff-cover

          # Fetch base branch for comparison
          git fetch origin ${{ github.base_ref }}

          # Check that new code has 80%+ coverage (ignores old tech debt)
          diff-cover coverage.xml \
            --compare-branch=origin/${{ github.base_ref }} \
            --fail-under=80 \
            --html-report=diff-coverage.html

          echo "✅ New code meets 80% coverage requirement"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: |
            api/coverage.xml
            api/htmlcov/
            api/diff-coverage.html

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-security
          path: api/bandit-report.json

  # =============================================================================
  # COMMIT MESSAGE VALIDATION
  # =============================================================================

  commit-validation:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          # Get all commits in this PR
          COMMITS=$(git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%s")

          echo "Validating commit messages..."
          INVALID_COUNT=0

          while IFS= read -r commit_msg; do
            # Check if commit follows conventional commit format
            if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?(!)?:.+'; then
              echo "❌ Invalid commit message: $commit_msg"
              echo "   Expected format: type(scope): description"
              echo "   Valid types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, revert"
              INVALID_COUNT=$((INVALID_COUNT + 1))
            else
              echo "✅ Valid: $commit_msg"
            fi
          done <<< "$COMMITS"

          if [ $INVALID_COUNT -gt 0 ]; then
            echo ""
            echo "❌ Found $INVALID_COUNT invalid commit message(s)"
            echo "Please follow conventional commit format: https://www.conventionalcommits.org/"
            exit 1
          fi

          echo ""
          echo "✅ All commit messages are valid!"

  # =============================================================================
  # DEPENDENCY SECURITY REVIEW
  # =============================================================================

  dependency-review:
    name: Dependency Security Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0
          comment-summary-in-pr: on-failure

  # =============================================================================
  # FRONTEND QUALITY CHECKS
  # =============================================================================

  frontend-quality:
    name: Frontend Quality (Lint, Type, Unit Tests)
    runs-on: ubuntu-latest

    # Only run if UI files changed
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.pull_request.changed_files, 'ui/') ||
      contains(github.event.pull_request.changed_files, '.github/workflows/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: |
          cd ui
          npm ci

      - name: Run ESLint
        run: |
          cd ui
          # TODO: Make blocking after fixing ESLint errors (tracked in issue)
          npm run lint || echo "⚠️ ESLint has errors - see GitHub issue for tracking"

      - name: Run Prettier format check
        run: |
          cd ui
          npm run format:check

      - name: Run TypeScript type checking
        run: |
          cd ui
          npm run type-check

      - name: Run npm audit (critical/high vulnerabilities)
        run: |
          cd ui
          npm audit --audit-level=high --json > npm-audit.json || true
          # Fail on critical/high vulnerabilities
          npm audit --audit-level=high

      - name: Run unit tests
        run: |
          cd ui
          # Run tests without strict coverage requirements (thin wrappers over libraries)
          npm run test:run

      - name: Check build
        run: |
          cd ui
          npm run build

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: ui/coverage/

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security
          path: ui/npm-audit.json

  # =============================================================================
  # OVERALL STATUS CHECK
  # =============================================================================

  pr-status:
    name: PR Quality Status
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, commit-validation, dependency-review]
    if: always()

    steps:
      - name: Check all quality gates passed
        run: |
          backend_result="${{ needs.backend-quality.result }}"
          frontend_result="${{ needs.frontend-quality.result }}"
          commit_result="${{ needs.commit-validation.result }}"
          dependency_result="${{ needs.dependency-review.result }}"

          echo "=== PR Quality Gate Results ==="
          echo "Backend Quality: $backend_result"
          echo "Frontend Quality: $frontend_result"
          echo "Commit Validation: $commit_result"
          echo "Dependency Review: $dependency_result"
          echo ""

          # Allow skipped jobs (when files didn't change or workflow_dispatch)
          if [[ "$backend_result" == "success" || "$backend_result" == "skipped" ]] && \
             [[ "$frontend_result" == "success" || "$frontend_result" == "skipped" ]] && \
             [[ "$commit_result" == "success" || "$commit_result" == "skipped" ]] && \
             [[ "$dependency_result" == "success" || "$dependency_result" == "skipped" ]]; then
            echo "✅ All quality gates passed!"
            exit 0
          else
            echo "❌ One or more quality gates failed!"
            exit 1
          fi
