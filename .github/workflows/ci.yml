name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # GATE 1: CODE QUALITY
  # =============================================================================

  code-quality-backend:
    name: "Gate 1: Backend Code Quality"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements*.txt') }}

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run Ruff linter
        run: |
          cd api
          ruff check src/ --output-format=github

      - name: Run Black formatter check
        run: |
          cd api
          black src/ --check --diff

      - name: Run MyPy type checking
        run: |
          cd api
          mypy src/

      - name: Run Bandit security check
        run: |
          cd api
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/

      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: api/bandit-report.json

  code-quality-frontend:
    name: "Gate 1: Frontend Code Quality"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: |
          cd ui
          npm ci

      - name: Run ESLint
        run: |
          cd ui
          npm run lint

      - name: Run TypeScript type checking
        run: |
          cd ui
          npm run type-check

      - name: Check build
        run: |
          cd ui
          npm run build

  # =============================================================================
  # GATE 2: UNIT TESTS
  # =============================================================================

  unit-tests-backend:
    name: "Gate 2: Backend Unit Tests"
    runs-on: ubuntu-latest
    needs: [code-quality-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements*.txt') }}

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run unit tests
        run: |
          cd api
          pytest tests/unit/ \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-fail-under=80 \
            --junit-xml=pytest-report.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: api/coverage.xml
          flags: backend-unit
          name: backend-unit-tests

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-unit-test-results
          path: |
            api/pytest-report.xml
            api/htmlcov/

  unit-tests-frontend:
    name: "Gate 2: Frontend Unit Tests"
    runs-on: ubuntu-latest
    needs: [code-quality-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: |
          cd ui
          npm ci

      - name: Run unit tests
        run: |
          cd ui
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ui/coverage
          flags: frontend-unit
          name: frontend-unit-tests

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-unit-test-results
          path: |
            ui/coverage/
            ui/test-results/

  # =============================================================================
  # GATE 3: INTEGRATION TESTS
  # =============================================================================

  integration-tests:
    name: "Gate 3: Integration Tests"
    runs-on: ubuntu-latest
    needs: [unit-tests-backend, unit-tests-frontend]

    services:
      neo4j:
        image: neo4j:5.20.0-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7687:7687
          - 7474:7474

      minio:
        image: minio/minio:RELEASE.2024-09-13T20-26-02Z
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
          timeout 60 bash -c 'until cypher-shell -u neo4j -p testpassword "RETURN 1"; do sleep 2; done'

      - name: Run integration tests
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword
          MINIO_ENDPOINT: localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        run: |
          cd api
          pytest tests/integration/ \
            --verbose \
            --junit-xml=integration-report.xml

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: api/integration-report.xml

  # =============================================================================
  # GATE 4: END-TO-END TESTS
  # =============================================================================

  e2e-tests:
    name: "Gate 4: End-to-End Tests"
    runs-on: ubuntu-latest
    needs: [integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

      - name: Run API E2E tests
        run: |
          cd api
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pytest tests/e2e/ \
            --verbose \
            --junit-xml=e2e-report.xml

      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          cd ui
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright E2E tests
        run: |
          cd ui
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            api/e2e-report.xml
            ui/test-results/
            ui/playwright-report/

      - name: Upload Playwright screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: ui/test-results/

      - name: Stop services
        if: always()
        run: docker-compose down

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================

  security-scan:
    name: "Security Vulnerability Scan"
    runs-on: ubuntu-latest
    needs: [code-quality-backend, code-quality-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Python safety check
        run: |
          cd api
          pip install safety
          safety check --json --output safety-report.json || true
          safety check

      - name: Run npm audit
        run: |
          cd ui
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            api/safety-report.json
            ui/npm-audit.json

  # =============================================================================
  # PERFORMANCE TESTING
  # =============================================================================

  performance-tests:
    name: "Performance Testing"
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: docker-compose up -d --build

      - name: Wait for services
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 5; done'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run --out json=performance-results.json tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: performance-results.json

      - name: Stop services
        if: always()
        run: docker-compose down

  # =============================================================================
  # DEPLOYMENT READINESS CHECK
  # =============================================================================

  deployment-readiness:
    name: "Deployment Readiness Check"
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build production images
        run: |
          docker build -t niem-api:latest ./api
          docker build -t niem-ui:latest ./ui

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'niem-api:latest'
          format: 'table'

      - name: Test production deployment
        run: |
          # Use production docker-compose override
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          timeout 120 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

      - name: Run smoke tests
        run: |
          # Basic connectivity tests
          curl -f http://localhost:8000/healthz
          curl -f http://localhost:8000/readyz
          curl -f http://localhost:3000

      - name: Cleanup
        if: always()
        run: docker-compose down

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================

  notify-status:
    name: "Notify Build Status"
    runs-on: ubuntu-latest
    needs: [deployment-readiness]
    if: always()

    steps:
      - name: Notify on success
        if: needs.deployment-readiness.result == 'success'
        run: |
          echo "✅ All quality gates passed! Ready for deployment."

      - name: Notify on failure
        if: needs.deployment-readiness.result != 'success'
        run: |
          echo "❌ Quality gates failed. Deployment blocked."
          exit 1