name: UI Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ui/**'
      - '.github/workflows/ui-tests.yml'
  push:
    branches: [ main ]
    paths:
      - 'ui/**'

jobs:
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install dependencies
      working-directory: ./ui
      run: npm ci

    - name: Run ESLint
      working-directory: ./ui
      run: npm run lint

    - name: Type check
      working-directory: ./ui
      run: npx tsc --noEmit

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install dependencies
      working-directory: ./ui
      run: npm ci

    - name: Build
      working-directory: ./ui
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ui-build
        path: ui/.next

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install dependencies
      working-directory: ./ui
      run: npm ci

    - name: Run unit tests with coverage
      working-directory: ./ui
      run: npm run test:coverage

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: ui/test-results/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: ui/coverage/

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]

    services:
      neo4j:
        image: neo4j:5.20.0-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7687:7687
          - 7474:7474

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'api/requirements*.txt'

    - name: Install API dependencies
      run: |
        cd api
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Start MinIO
      run: |
        docker run -d \
          --name minio \
          -p 9000:9000 \
          -p 9001:9001 \
          -e MINIO_ROOT_USER=minioadmin \
          -e MINIO_ROOT_PASSWORD=minioadmin \
          minio/minio:latest \
          server /data --console-address ":9001"

        # Wait for MinIO to be ready
        timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live 2>/dev/null; do sleep 2; done'
        echo "✅ MinIO is ready"

    - name: Start API server
      working-directory: ./api
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
        MINIO_SECURE: false
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        timeout 60 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 2; done'
        echo "✅ API server is ready"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install UI dependencies
      working-directory: ./ui
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./ui
      run: npx playwright install --with-deps chromium

    - name: Run E2E tests
      working-directory: ./ui
      env:
        BASE_URL: http://localhost:3000
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          ui/test-results/
          ui/playwright-report/

    - name: Upload E2E screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-screenshots
        path: ui/screenshots/

    - name: Upload E2E videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-videos
        path: ui/test-results/**/videos/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Run npm audit
      working-directory: ./ui
      run: npm audit --audit-level=moderate || true

    - name: Check for outdated dependencies
      working-directory: ./ui
      run: npm outdated || true
