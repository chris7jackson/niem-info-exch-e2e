name: API Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/api-tests.yml'
  push:
    branches: [ main ]
    paths:
      - 'api/**'

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./api
      run: |
        pip install -r requirements.txt
        pip install ruff black mypy

    - name: Run ruff
      working-directory: ./api
      run: ruff check src/

    - name: Check formatting with black
      working-directory: ./api
      run: black --check src/

    - name: Type check with mypy
      working-directory: ./api
      run: mypy src/ || true  # Allow to fail for now

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      working-directory: ./api
      run: |
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run unit tests
      working-directory: ./api
      run: |
        pytest tests/unit -v -p no:cov --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./api/coverage.xml
        flags: unittests
        name: codecov-api
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:5.20-community
        env:
          NEO4J_AUTH: neo4j/testpassword
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio:
        image: quay.io/minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "mc ready local"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-21-jre-headless

    - name: Install Python dependencies
      working-directory: ./api
      run: |
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run integration tests
      working-directory: ./api
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
        MINIO_ENDPOINT: http://localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
        MINIO_SECURE: "false"
      run: |
        pytest tests/integration -v -p no:cov --tb=short -m integration || true  # Allow to fail until services are properly configured

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      working-directory: ./api
      run: |
        pip install -r requirements.txt
        pip install bandit pip-audit

    - name: Run bandit security scan
      working-directory: ./api
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Run pip-audit
      working-directory: ./api
      run: pip-audit --require-hashes --disable-pip || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: api/bandit-report.json
