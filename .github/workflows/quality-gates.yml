name: Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # QUALITY GATE: PULL REQUEST VALIDATION
  # =============================================================================

  pr-quality-check:
    name: "PR Quality Gate"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      # Backend Quality Checks
      - name: Install Python dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run backend linting
        run: |
          cd api
          ruff check src/
          black src/ --check

      - name: Run backend type checking
        run: |
          cd api
          mypy src/

      - name: Run backend unit tests
        run: |
          cd api
          pytest tests/unit/ --cov=src --cov-fail-under=80

      # Frontend Quality Checks
      - name: Install Node.js dependencies
        run: |
          cd ui
          npm ci

      - name: Run frontend linting
        run: |
          cd ui
          npm run lint

      - name: Run frontend type checking
        run: |
          cd ui
          npm run type-check

      - name: Run frontend unit tests
        run: |
          cd ui
          npm run test:run

      - name: Build frontend
        run: |
          cd ui
          npm run build

  # =============================================================================
  # QUALITY GATE: CODE COVERAGE
  # =============================================================================

  coverage-check:
    name: "Coverage Quality Gate"
    runs-on: ubuntu-latest
    needs: [pr-quality-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run tests with coverage
        run: |
          cd api
          pytest tests/unit/ \
            --cov=src \
            --cov-report=xml \
            --cov-fail-under=80

      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-py@v2
        with:
          output: coverage.svg

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: api/coverage.xml
          fail_ci_if_error: true

  # =============================================================================
  # QUALITY GATE: SECURITY VALIDATION
  # =============================================================================

  security-gate:
    name: "Security Quality Gate"
    runs-on: ubuntu-latest
    needs: [pr-quality-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Bandit security linter
        run: |
          cd api
          pip install bandit
          bandit -r src/ -ll

      - name: Run npm audit
        run: |
          cd ui
          npm audit --audit-level=moderate

  # =============================================================================
  # QUALITY GATE: DEPENDENCY VALIDATION
  # =============================================================================

  dependency-check:
    name: "Dependency Quality Gate"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Python dependencies
        run: |
          cd api
          pip install safety
          safety check

      - name: Check Node.js dependencies
        run: |
          cd ui
          npm ci
          npm audit --audit-level=high

      - name: License compliance check
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        continue-on-error: true

  # =============================================================================
  # QUALITY GATE: PERFORMANCE VALIDATION
  # =============================================================================

  performance-gate:
    name: "Performance Quality Gate"
    runs-on: ubuntu-latest
    needs: [pr-quality-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run performance benchmarks
        run: |
          cd api
          pytest tests/unit/ --benchmark-only --benchmark-json=benchmark.json

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: api/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false

  # =============================================================================
  # FINAL GATE: OVERALL STATUS
  # =============================================================================

  quality-gate-status:
    name: "Overall Quality Gate Status"
    runs-on: ubuntu-latest
    needs: [coverage-check, security-gate, dependency-check, performance-gate]
    if: always()

    steps:
      - name: Check all gates passed
        run: |
          if [[ "${{ needs.coverage-check.result }}" == "success" && \
                "${{ needs.security-gate.result }}" == "success" && \
                "${{ needs.dependency-check.result }}" == "success" && \
                "${{ needs.performance-gate.result }}" == "success" ]]; then
            echo "✅ All quality gates passed!"
            echo "::notice::Quality gates validation successful"
          else
            echo "❌ One or more quality gates failed!"
            echo "::error::Quality gates validation failed"
            echo "Coverage: ${{ needs.coverage-check.result }}"
            echo "Security: ${{ needs.security-gate.result }}"
            echo "Dependencies: ${{ needs.dependency-check.result }}"
            echo "Performance: ${{ needs.performance-gate.result }}"
            exit 1
          fi

      - name: Update PR status
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.coverage-check.result }}' === 'success' &&
                          '${{ needs.security-gate.result }}' === 'success' &&
                          '${{ needs.dependency-check.result }}' === 'success' &&
                          '${{ needs.performance-gate.result }}' === 'success'
                          ? 'success' : 'failure';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: status === 'success' ? 'All quality gates passed' : 'Quality gates failed',
              context: 'quality-gates/overall'
            });