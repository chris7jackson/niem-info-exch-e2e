name: Main Pipeline

# Workflow Execution Flow:
# 1. PR merges to main → Auto Version Bump workflow runs
# 2. Auto Version Bump detects changes and bumps versions
# 3. Auto Version Bump commits new versions and completes
# 4. Main Pipeline triggers (using updated versions in Docker builds)
# 5. Version bump commit triggers Auto Version Bump again, but it skips
# 6. Since Auto Version Bump skipped, Main Pipeline does NOT run again
#
# This ensures:
# - Versions are bumped before building Docker images
# - Docker images contain correct version metadata
# - Pipeline only runs once per merge (not twice)

on:
  # Wait for auto-version-bump to complete before running
  # This ensures Docker images are built with correct versions
  workflow_run:
    workflows: ["Auto Version Bump"]
    types: [completed]
    branches: [main]
  workflow_dispatch:  # Manual trigger for testing

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # E2E TESTS
  # =============================================================================

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest

    # Only run if auto-version-bump succeeded (not skipped due to version bump commit)
    # or if manually triggered
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    services:
      neo4j:
        image: neo4j:5.20.0-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7687:7687
          - 7474:7474

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # When triggered by workflow_run, checkout the latest main (with version bump)
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -p 9001:9001 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio:latest \
            server /data --console-address ":9001"

          # Wait for MinIO to be ready
          timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live 2>/dev/null; do sleep 2; done'
          echo "✅ MinIO is ready"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'api/requirements*.txt'

      - name: Install API dependencies
        run: |
          cd api
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -e .

      - name: Start API server in background
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword
          MINIO_ENDPOINT: localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          MINIO_SECURE: false
        run: |
          cd api
          uvicorn src.niem_api.main:app --host 0.0.0.0 --port 8000 &
          # Wait for API to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8000/healthz 2>/dev/null; do sleep 2; done'
          echo "✅ API server is ready"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install UI dependencies
        run: |
          cd ui
          # Handle npm bug with optional dependencies (Rollup)
          # https://github.com/npm/cli/issues/4828
          rm -rf node_modules
          npm install --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: |
          cd ui
          npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: |
          cd ui
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            ui/playwright-report/
            ui/test-results/

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-videos
          path: ui/test-results/**/video.webm

  # =============================================================================
  # DOCKER BUILD & SMOKE TESTS
  # =============================================================================

  docker-build-test:
    name: Docker Build & Smoke Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Read version files
        id: version
        run: |
          API_VERSION=$(cat api/VERSION)
          UI_VERSION=$(cat ui/VERSION)
          echo "api_version=$API_VERSION" >> $GITHUB_OUTPUT
          echo "ui_version=$UI_VERSION" >> $GITHUB_OUTPUT
          echo "API version: $API_VERSION"
          echo "UI version: $UI_VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        env:
          API_VERSION: ${{ steps.version.outputs.api_version }}
          UI_VERSION: ${{ steps.version.outputs.ui_version }}
          GIT_COMMIT: ${{ github.sha }}
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: |
          # Build API with version metadata
          docker compose build --build-arg VERSION=${API_VERSION} \
            --build-arg GIT_COMMIT=${GIT_COMMIT} \
            --build-arg BUILD_DATE=${BUILD_DATE} \
            api

          # Build UI with version metadata
          docker compose build --build-arg VERSION=${UI_VERSION} \
            --build-arg GIT_COMMIT=${GIT_COMMIT} \
            --build-arg BUILD_DATE=${BUILD_DATE} \
            ui

          # Start all services
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
          echo "All services are healthy"

      - name: Run smoke tests
        run: |
          # Test API health endpoints
          echo "Testing API healthz..."
          API_RESPONSE=$(curl -f http://localhost:8000/healthz)
          echo "$API_RESPONSE"

          # Verify API version is injected
          API_VERSION=$(echo "$API_RESPONSE" | jq -r '.api_version')
          echo "API version from /healthz: $API_VERSION"
          if [ "$API_VERSION" == "unknown" ] || [ "$API_VERSION" == "null" ]; then
            echo "❌ API version not properly injected!"
            exit 1
          fi

          echo "Testing API readyz..."
          curl -f http://localhost:8000/readyz

          # Test UI is accessible
          echo "Testing UI..."
          curl -f http://localhost:3000

          echo "✅ All smoke tests passed"

      - name: View service logs on failure
        if: failure()
        run: |
          echo "=== API Logs ==="
          docker compose logs api
          echo "=== UI Logs ==="
          docker compose logs ui
          echo "=== Neo4j Logs ==="
          docker compose logs neo4j
          echo "=== MinIO Logs ==="
          docker compose logs minio

      - name: Stop services
        if: always()
        run: docker compose down

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================

  security-scan:
    name: Security Scanning (Trivy)
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    # Block on critical vulnerabilities in production dependencies
    continue-on-error: false

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail on critical/high vulnerabilities
          ignore-unfixed: true  # Only fail on issues with available fixes

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: trivy-results.sarif

  # =============================================================================
  # CODE ANALYSIS
  # =============================================================================

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    # Non-blocking: Deep semantic analysis may have false positives
    # Results are tracked in GitHub Security tab for review
    continue-on-error: true

    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      matrix:
        language: ['python', 'javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # =============================================================================
  # PIPELINE STATUS
  # =============================================================================

  pipeline-status:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [e2e-tests, docker-build-test, security-scan, codeql-analysis]
    if: always()

    steps:
      - name: Check critical gates
        run: |
          e2e_result="${{ needs.e2e-tests.result }}"
          docker_result="${{ needs.docker-build-test.result }}"
          security_result="${{ needs.security-scan.result }}"
          codeql_result="${{ needs.codeql-analysis.result }}"

          echo "=== Pipeline Results ==="
          echo "E2E Tests: $e2e_result"
          echo "Docker Build & Smoke: $docker_result"
          echo "Security Scan (Trivy): $security_result"
          echo "CodeQL Analysis: $codeql_result (non-blocking)"
          echo ""

          # Critical gates: e2e, docker, security
          # CodeQL is non-blocking (tracked in Security tab)
          if [[ "$e2e_result" == "success" && \
                "$docker_result" == "success" && \
                "$security_result" == "success" ]]; then
            echo "✅ All critical gates passed!"
            exit 0
          else
            echo "❌ One or more critical gates failed!"
            exit 1
          fi
